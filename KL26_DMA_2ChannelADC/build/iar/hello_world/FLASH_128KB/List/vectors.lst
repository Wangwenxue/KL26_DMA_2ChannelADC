###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        04/Feb/2016  13:24:00
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\src\cpu\vectors.c
#    Command line =  
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\src\cpu\vectors.c -D IAR -D
#        FREEDOM -lCN
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\List\
#        -lB
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\List\
#        -o
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\projects\hello_world\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\common\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\cpu\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\cpu\headers\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\llwu\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\lptmr\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\mcg\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\pmc\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\rcm\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\rtc\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\smc\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\uart\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\wdog\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\cmp\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\platforms\
#        -I D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\
#        -Ol
#    List file    =  
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\List\vectors.lst
#    Object file  =  
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\Obj\vectors.o
#
###############################################################################

D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\src\cpu\vectors.c
      1          /******************************************************************************
      2          * File:    vectors.c
      3          *
      4          * Purpose: Configure interrupt vector table for Kinetis.
      5          ******************************************************************************/
      6          
      7          #include "vectors.h"
      8          #include "isr.h"
      9          #include "common.h"
     10          
     11          /******************************************************************************
     12          * Vector Table
     13          ******************************************************************************/
     14          typedef void (*vector_entry)(void);
     15          
     16          #if (defined(KEIL))
     17          const vector_entry  __vector_table[] = //@ ".intvec" =
     18          #elif (defined(IAR))
     19          #pragma location = ".intvec"

   \                                 In section .intvec, align 4
     20          const vector_entry  __vector_table[] = //@ ".intvec" =
   \                     __vector_table:
   \   00000000   0x........         DC32 __BOOT_STACK_ADDRESS, __startup, default_isr, default_isr
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 default_isr, default_isr, default_isr, default_isr, default_isr
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000024   0x........         DC32 default_isr, default_isr, default_isr, default_isr, default_isr
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000038   0x........         DC32 default_isr, default_isr, default_isr, DMA1_IRQHandler
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000048   0x........         DC32 default_isr, default_isr, default_isr, default_isr, default_isr
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000005C   0x........         DC32 default_isr, default_isr, default_isr, default_isr, default_isr
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000070   0x........         DC32 default_isr, default_isr, default_isr, default_isr, default_isr
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000084   0x........         DC32 default_isr, default_isr, default_isr, default_isr, default_isr
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000098   0x........         DC32 default_isr, default_isr, default_isr, default_isr, default_isr
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   000000AC   0x........         DC32 default_isr, default_isr, default_isr, default_isr, default_isr
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   000000C0   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000000D4   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000000E8   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000000FC   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000110   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000124   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000138   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   0000014C   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000160   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000174   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000188   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   0000019C   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000001B0   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000001C4   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000001D8   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000001EC   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000200   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000214   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000228   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   0000023C   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000250   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000264   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000278   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   0000028C   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000002A0   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000002B4   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000002C8   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000002DC   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000002F0   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000304   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000318   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   0000032C   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000340   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000354   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000368   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   0000037C   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000390   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000003A4   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000003B8   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000003CC   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000003E0   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000003F4   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH, 0FFFFFFFFH
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000408   0xFFFFFFFF         DC32 0FFFFFFFFH, 0FFFFFFFEH
   \              0xFFFFFFFE   
     21          #elif (defined(CW))
     22          const vector_entry __attribute__ ((section(".vectortable"))) __vector_table[] = //@ ".intvec" =
     23          #endif
     24          {
     25             VECTOR_000,           /* Initial SP           */
     26             VECTOR_001,           /* Initial PC           */
     27             VECTOR_002,
     28             VECTOR_003,
     29             VECTOR_004,
     30             VECTOR_005,
     31             VECTOR_006,
     32             VECTOR_007,
     33             VECTOR_008,
     34             VECTOR_009,
     35             VECTOR_010,
     36             VECTOR_011,
     37             VECTOR_012,
     38             VECTOR_013,
     39             VECTOR_014,
     40             VECTOR_015,
     41             VECTOR_016,
     42             VECTOR_017,
     43             VECTOR_018,
     44             VECTOR_019,
     45             VECTOR_020,
     46             VECTOR_021,
     47             VECTOR_022,
     48             VECTOR_023,
     49             VECTOR_024,
     50             VECTOR_025,
     51             VECTOR_026,
     52             VECTOR_027,
     53             VECTOR_028,
     54             VECTOR_029,
     55             VECTOR_030,
     56             VECTOR_031,
     57             VECTOR_032,
     58             VECTOR_033,
     59             VECTOR_034,
     60             VECTOR_035,
     61             VECTOR_036,
     62             VECTOR_037,
     63             VECTOR_038,
     64             VECTOR_039,
     65             VECTOR_040,
     66             VECTOR_041,
     67             VECTOR_042,
     68             VECTOR_043,
     69             VECTOR_044,
     70             VECTOR_045,
     71             VECTOR_046,
     72             VECTOR_047,
     73             VECTOR_PADDING,
     74             VECTOR_PADDING,
     75             VECTOR_PADDING,
     76             VECTOR_PADDING,
     77             VECTOR_PADDING,
     78             VECTOR_PADDING,
     79             VECTOR_PADDING,
     80             VECTOR_PADDING,
     81             VECTOR_PADDING,
     82             VECTOR_PADDING,
     83             VECTOR_PADDING,
     84             VECTOR_PADDING,
     85             VECTOR_PADDING,
     86             VECTOR_PADDING,
     87             VECTOR_PADDING,
     88             VECTOR_PADDING,
     89             VECTOR_PADDING,
     90             VECTOR_PADDING,
     91             VECTOR_PADDING,
     92             VECTOR_PADDING,
     93             VECTOR_PADDING,
     94             VECTOR_PADDING,
     95             VECTOR_PADDING,
     96             VECTOR_PADDING,
     97             VECTOR_PADDING,
     98             VECTOR_PADDING,
     99             VECTOR_PADDING,
    100             VECTOR_PADDING,
    101             VECTOR_PADDING,
    102             VECTOR_PADDING,
    103             VECTOR_PADDING,
    104             VECTOR_PADDING,
    105             VECTOR_PADDING,
    106             VECTOR_PADDING,
    107             VECTOR_PADDING,
    108             VECTOR_PADDING,
    109             VECTOR_PADDING,
    110             VECTOR_PADDING,
    111             VECTOR_PADDING,
    112             VECTOR_PADDING,
    113             VECTOR_PADDING,
    114             VECTOR_PADDING,
    115             VECTOR_PADDING,
    116             VECTOR_PADDING,
    117             VECTOR_PADDING,
    118             VECTOR_PADDING,
    119             VECTOR_PADDING,
    120             VECTOR_PADDING,
    121             VECTOR_PADDING,
    122             VECTOR_PADDING,
    123             VECTOR_PADDING,
    124             VECTOR_PADDING,
    125             VECTOR_PADDING,
    126             VECTOR_PADDING,
    127             VECTOR_PADDING,
    128             VECTOR_PADDING,
    129             VECTOR_PADDING,
    130             VECTOR_PADDING,
    131             VECTOR_PADDING,
    132             VECTOR_PADDING,
    133             VECTOR_PADDING,
    134             VECTOR_PADDING,
    135             VECTOR_PADDING,
    136             VECTOR_PADDING,
    137             VECTOR_PADDING,
    138             VECTOR_PADDING,
    139             VECTOR_PADDING,
    140             VECTOR_PADDING,
    141             VECTOR_PADDING,
    142             VECTOR_PADDING,
    143             VECTOR_PADDING,
    144             VECTOR_PADDING,
    145             VECTOR_PADDING,
    146             VECTOR_PADDING,
    147             VECTOR_PADDING,
    148             VECTOR_PADDING,
    149             VECTOR_PADDING,
    150             VECTOR_PADDING,
    151             VECTOR_PADDING,
    152             VECTOR_PADDING,
    153             VECTOR_PADDING,
    154             VECTOR_PADDING,
    155             VECTOR_PADDING,
    156             VECTOR_PADDING,
    157             VECTOR_PADDING,
    158             VECTOR_PADDING,
    159             VECTOR_PADDING,
    160             VECTOR_PADDING,
    161             VECTOR_PADDING,
    162             VECTOR_PADDING,
    163             VECTOR_PADDING,
    164             VECTOR_PADDING,
    165             VECTOR_PADDING,
    166             VECTOR_PADDING,
    167             VECTOR_PADDING,
    168             VECTOR_PADDING,
    169             VECTOR_PADDING,
    170             VECTOR_PADDING,
    171             VECTOR_PADDING,
    172             VECTOR_PADDING,
    173             VECTOR_PADDING,
    174             VECTOR_PADDING,
    175             VECTOR_PADDING,
    176             VECTOR_PADDING,
    177             VECTOR_PADDING,
    178             VECTOR_PADDING,
    179             VECTOR_PADDING,
    180             VECTOR_PADDING,
    181             VECTOR_PADDING,
    182             VECTOR_PADDING,
    183             VECTOR_PADDING,
    184             VECTOR_PADDING,
    185             VECTOR_PADDING,
    186             VECTOR_PADDING,
    187             VECTOR_PADDING,
    188             VECTOR_PADDING,
    189             VECTOR_PADDING,
    190             VECTOR_PADDING,
    191             VECTOR_PADDING,
    192             VECTOR_PADDING,
    193             VECTOR_PADDING,
    194             VECTOR_PADDING,
    195             VECTOR_PADDING,
    196             VECTOR_PADDING,
    197             VECTOR_PADDING,
    198             VECTOR_PADDING,
    199             VECTOR_PADDING,
    200             VECTOR_PADDING,
    201             VECTOR_PADDING,
    202             VECTOR_PADDING,
    203             VECTOR_PADDING,
    204             VECTOR_PADDING,
    205             VECTOR_PADDING,
    206             VECTOR_PADDING,
    207             VECTOR_PADDING,
    208             VECTOR_PADDING,
    209             VECTOR_PADDING,
    210             VECTOR_PADDING,
    211             VECTOR_PADDING,
    212             VECTOR_PADDING,
    213             VECTOR_PADDING,
    214             VECTOR_PADDING,
    215             VECTOR_PADDING,
    216             VECTOR_PADDING,
    217             VECTOR_PADDING,
    218             VECTOR_PADDING,
    219             VECTOR_PADDING,
    220             VECTOR_PADDING,
    221             VECTOR_PADDING,
    222             VECTOR_PADDING,
    223             VECTOR_PADDING,
    224             VECTOR_PADDING,
    225             VECTOR_PADDING,
    226             VECTOR_PADDING,
    227             VECTOR_PADDING,
    228             VECTOR_PADDING,
    229             VECTOR_PADDING,
    230             VECTOR_PADDING,
    231             VECTOR_PADDING,
    232             VECTOR_PADDING,
    233             VECTOR_PADDING,
    234             VECTOR_PADDING,
    235             VECTOR_PADDING,
    236             VECTOR_PADDING,
    237             VECTOR_PADDING,
    238             VECTOR_PADDING,
    239             VECTOR_PADDING,
    240             VECTOR_PADDING,
    241             VECTOR_PADDING,
    242             VECTOR_PADDING,
    243             VECTOR_PADDING,
    244             VECTOR_PADDING,
    245             VECTOR_PADDING,
    246             VECTOR_PADDING,
    247             VECTOR_PADDING,
    248             VECTOR_PADDING,
    249             VECTOR_PADDING,
    250             VECTOR_PADDING,
    251             VECTOR_PADDING,
    252             VECTOR_PADDING,
    253             VECTOR_PADDING,
    254             VECTOR_PADDING,
    255             VECTOR_PADDING,
    256             VECTOR_PADDING,
    257             VECTOR_PADDING,
    258             VECTOR_PADDING,
    259             VECTOR_PADDING,
    260             VECTOR_PADDING,
    261             VECTOR_PADDING,
    262             VECTOR_PADDING,
    263             VECTOR_PADDING,
    264             VECTOR_PADDING,
    265             VECTOR_PADDING,
    266             VECTOR_PADDING,
    267             VECTOR_PADDING,
    268             VECTOR_PADDING,
    269             VECTOR_PADDING,
    270             VECTOR_PADDING,
    271             VECTOR_PADDING,
    272             VECTOR_PADDING,
    273             VECTOR_PADDING,
    274             VECTOR_PADDING,
    275             VECTOR_PADDING,
    276             VECTOR_PADDING,
    277             VECTOR_PADDING,
    278             VECTOR_PADDING,
    279             VECTOR_PADDING,
    280             VECTOR_PADDING,
    281          #ifndef CW
    282             CONFIG_1,
    283             CONFIG_2,
    284             CONFIG_3,
    285             CONFIG_4,
    286          #endif
    287          
    288          };
    289          
    290          #if (defined(CW))
    291          const vector_entry __attribute__ ((section(".cfmconfig"))) flash_config[] = //@ ".intvec" =
    292          {
    293          	   CONFIG_1,
    294          	   CONFIG_2,
    295          	   CONFIG_3,
    296          	   CONFIG_4,
    297          	
    298          };
    299          #endif
    300          // VECTOR_TABLE end
    301          /******************************************************************************
    302          * default_isr(void)
    303          *
    304          * Default ISR definition.
    305          *
    306          * In:  n/a
    307          * Out: n/a
    308          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    309          void default_isr(void)
    310          {
   \                     default_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    311             #define VECTORNUM                     (*(volatile uint32_t*)(0xE000ED04))
    312          
    313             printf("\n****default_isr entered on vector %d*****\r\n\n",(int)VECTORNUM);
   \   00000002   0x....             LDR      R0,??DataTable2  ;; 0xe000ed04
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x....             LDR      R0,??DataTable2_1
   \   00000008   0x.... 0x....      BL       printf
    314             return;
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    315          }
    316          /******************************************************************************/
    317          /* Generic interrupt handler for the PTA4 GPIO interrupt connected to an 
    318           * abort switch. 
    319           * NOTE: For true abort operation this handler should be modified
    320           * to jump to the main process instead of executing a return.
    321           */

   \                                 In section .text, align 2, keep-with-next
    322          void abort_isr(void)
    323          {
   \                     abort_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    324             /* Write 1 to the PTA4 interrupt flag bit to clear the interrupt */
    325             PORTA_PCR4 |= PORT_PCR_ISF_MASK;    
   \   00000002   0x....             LDR      R0,??DataTable2_2  ;; 0x40049010
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2180             MOVS     R1,#+128
   \   00000008   0x0449             LSLS     R1,R1,#+17       ;; #+16777216
   \   0000000A   0x4301             ORRS     R1,R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable2_2  ;; 0x40049010
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    326            
    327             printf("\n****Abort button interrupt****\n\n");
   \   00000010   0x....             LDR      R0,??DataTable2_3
   \   00000012   0x.... 0x....      BL       printf
    328             return;
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    329          }
    330          /******************************************************************************/
    331          /* Exception frame without floating-point storage 
    332           * hard fault handler in C,
    333           * with stack frame location as input parameter
    334           */

   \                                 In section .text, align 2, keep-with-next
    335          void 
    336          hard_fault_handler_c(unsigned int * hardfault_args)
    337          {
   \                     hard_fault_handler_c: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    338              unsigned int stacked_r0;
    339              unsigned int stacked_r1;
    340              unsigned int stacked_r2;
    341              unsigned int stacked_r3;
    342              unsigned int stacked_r12;
    343              unsigned int stacked_lr;
    344              unsigned int stacked_pc;
    345              unsigned int stacked_psr;
    346              
    347              //Exception stack frame
    348              stacked_r0 = ((unsigned long) hardfault_args[0]);
   \   00000004   0x6806             LDR      R6,[R0, #+0]
    349              stacked_r1 = ((unsigned long) hardfault_args[1]);
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0x9103             STR      R1,[SP, #+12]
    350              stacked_r2 = ((unsigned long) hardfault_args[2]);
   \   0000000A   0x6881             LDR      R1,[R0, #+8]
   \   0000000C   0x9102             STR      R1,[SP, #+8]
    351              stacked_r3 = ((unsigned long) hardfault_args[3]);
   \   0000000E   0x68C1             LDR      R1,[R0, #+12]
   \   00000010   0x9101             STR      R1,[SP, #+4]
    352              
    353              stacked_r12 = ((unsigned long) hardfault_args[4]);
   \   00000012   0x6901             LDR      R1,[R0, #+16]
   \   00000014   0x9100             STR      R1,[SP, #+0]
    354              stacked_lr = ((unsigned long) hardfault_args[5]);
   \   00000016   0x6947             LDR      R7,[R0, #+20]
    355              stacked_pc = ((unsigned long) hardfault_args[6]);
   \   00000018   0x6984             LDR      R4,[R0, #+24]
    356              stacked_psr = ((unsigned long) hardfault_args[7]);
   \   0000001A   0x69C5             LDR      R5,[R0, #+28]
    357              
    358              printf ("[Hard fault handler]\n");
   \   0000001C   0x....             LDR      R0,??DataTable2_4
   \   0000001E   0x.... 0x....      BL       printf
    359              printf ("R0 = %x\n", stacked_r0);
   \   00000022   0x0031             MOVS     R1,R6
   \   00000024   0x....             LDR      R0,??DataTable2_5
   \   00000026   0x.... 0x....      BL       printf
    360              printf ("R1 = %x\n", stacked_r1);
   \   0000002A   0x9903             LDR      R1,[SP, #+12]
   \   0000002C   0x....             LDR      R0,??DataTable2_6
   \   0000002E   0x.... 0x....      BL       printf
    361              printf ("R2 = %x\n", stacked_r2);
   \   00000032   0x9902             LDR      R1,[SP, #+8]
   \   00000034   0x....             LDR      R0,??DataTable2_7
   \   00000036   0x.... 0x....      BL       printf
    362              printf ("R3 = %x\n", stacked_r3);
   \   0000003A   0x9901             LDR      R1,[SP, #+4]
   \   0000003C   0x....             LDR      R0,??DataTable2_8
   \   0000003E   0x.... 0x....      BL       printf
    363              printf ("R12 = %x\n", stacked_r12);
   \   00000042   0x9900             LDR      R1,[SP, #+0]
   \   00000044   0x....             LDR      R0,??DataTable2_9
   \   00000046   0x.... 0x....      BL       printf
    364              printf ("LR = %x\n", stacked_lr);
   \   0000004A   0x0039             MOVS     R1,R7
   \   0000004C   0x....             LDR      R0,??DataTable2_10
   \   0000004E   0x.... 0x....      BL       printf
    365              printf ("PC = %x\n", stacked_pc);
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x....             LDR      R0,??DataTable2_11
   \   00000056   0x.... 0x....      BL       printf
    366              printf ("PSR = %x\n", stacked_psr);
   \   0000005A   0x0029             MOVS     R1,R5
   \   0000005C   0x....             LDR      R0,??DataTable2_12
   \   0000005E   0x.... 0x....      BL       printf
    367          #ifndef CW
    368              printf ("BFAR = %x\n", (*((volatile unsigned long *)(0xE000ED38))));
   \   00000062   0x....             LDR      R0,??DataTable2_13  ;; 0xe000ed38
   \   00000064   0x6801             LDR      R1,[R0, #+0]
   \   00000066   0x....             LDR      R0,??DataTable2_14
   \   00000068   0x.... 0x....      BL       printf
    369              printf ("CFSR = %x\n", (*((volatile unsigned long *)(0xE000ED28))));
   \   0000006C   0x....             LDR      R0,??DataTable2_15  ;; 0xe000ed28
   \   0000006E   0x6801             LDR      R1,[R0, #+0]
   \   00000070   0x....             LDR      R0,??DataTable2_16
   \   00000072   0x.... 0x....      BL       printf
    370              printf ("HFSR = %x\n", (*((volatile unsigned long *)(0xE000ED2C))));
   \   00000076   0x....             LDR      R0,??DataTable2_17  ;; 0xe000ed2c
   \   00000078   0x6801             LDR      R1,[R0, #+0]
   \   0000007A   0x....             LDR      R0,??DataTable2_18
   \   0000007C   0x.... 0x....      BL       printf
    371              printf ("DFSR = %x\n", (*((volatile unsigned long *)(0xE000ED30))));
   \   00000080   0x....             LDR      R0,??DataTable2_19  ;; 0xe000ed30
   \   00000082   0x6801             LDR      R1,[R0, #+0]
   \   00000084   0x....             LDR      R0,??DataTable2_20
   \   00000086   0x.... 0x....      BL       printf
    372              printf ("AFSR = %x\n", (*((volatile unsigned long *)(0xE000ED3C))));
   \   0000008A   0x....             LDR      R0,??DataTable2_21  ;; 0xe000ed3c
   \   0000008C   0x6801             LDR      R1,[R0, #+0]
   \   0000008E   0x....             LDR      R0,??DataTable2_22
   \   00000090   0x.... 0x....      BL       printf
    373          #else
    374              printf ("BFAR = %x\n", (*((volatile unsigned int *)(0xE000ED38))));
    375              printf ("CFSR = %x\n", (*((volatile unsigned int *)(0xE000ED28))));
    376              printf ("HFSR = %x\n", (*((volatile unsigned int *)(0xE000ED2C))));
    377              printf ("DFSR = %x\n", (*((volatile unsigned int *)(0xE000ED30))));
    378              printf ("AFSR = %x\n", (*((volatile unsigned int *)(0xE000ED3C))));
    379          #endif
    380              for(;;)
   \                     ??hard_fault_handler_c_0: (+1)
   \   00000094   0xE7FE             B        ??hard_fault_handler_c_0
    381              {}
    382          } 

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40049010         DC32     0x40049010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0xE000ED38         DC32     0xe000ed38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0xE000ED28         DC32     0xe000ed28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0xE000ED2C         DC32     0xe000ed2c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0xE000ED30         DC32     0xe000ed30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0xE000ED3C         DC32     0xe000ed3c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0A 0x2A          DC8 "\012****default_isr entered on vector %d*****\015\012\012"
   \              0x2A 0x2A    
   \              0x2A 0x64    
   \              0x65 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x5F 0x69    
   \              0x73 0x72    
   \              0x20 0x65    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x76 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x20 0x25    
   \              0x64 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x0D 0x0A    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0A 0x2A          DC8 "\012****Abort button interrupt****\012\012"
   \              0x2A 0x2A    
   \              0x2A 0x41    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x20 0x62    
   \              0x75 0x74    
   \              0x74 0x6F    
   \              0x6E 0x20    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x72 0x72    
   \              0x75 0x70    
   \              0x74 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x0A    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x5B 0x48          DC8 "[Hard fault handler]\012"
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x72 0x5D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x30          DC8 "R0 = %x\012"
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x52 0x31          DC8 "R1 = %x\012"
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x52 0x32          DC8 "R2 = %x\012"
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x52 0x33          DC8 "R3 = %x\012"
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x31          DC8 "R12 = %x\012"
   \              0x32 0x20    
   \              0x3D 0x20    
   \              0x25 0x78    
   \              0x0A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x4C 0x52          DC8 "LR = %x\012"
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x50 0x43          DC8 "PC = %x\012"
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x50 0x53          DC8 "PSR = %x\012"
   \              0x52 0x20    
   \              0x3D 0x20    
   \              0x25 0x78    
   \              0x0A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x42 0x46          DC8 "BFAR = %x\012"
   \              0x41 0x52    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x43 0x46          DC8 "CFSR = %x\012"
   \              0x53 0x52    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x48 0x46          DC8 "HFSR = %x\012"
   \              0x53 0x52    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x44 0x46          DC8 "DFSR = %x\012"
   \              0x53 0x52    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x41 0x46          DC8 "AFSR = %x\012"
   \              0x53 0x52    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0
    383          //void SRTC_ISR(void) 
    384          //{
    385          //  
    386          //  volatile uint32 temp;
    387          //  
    388          //   printf("SRTC_ISR entered\r\n");
    389          //   
    390          //   temp = RTC_SR;
    391          //   temp = temp + 1;
    392          //   
    393          //   if((RTC_SR & 0x01)== 0x01)
    394          //     {
    395          //       printf("SRTC time invalid interrupt entered...\r\n");
    396          //   	   RTC_SR &= 0x07;  //clear TCE, or SRTC_TSR can  not be written 
    397          //   	   RTC_TSR = 0x00000005;  //clear TIF by writing to the seconds register
    398          //     }	
    399          //   else if((RTC_SR & 0x02) == 0x02)
    400          //   {
    401          //   	   printf("SRTC time overflow interrupt entered...\r\n");
    402          //   	   RTC_SR &= 0x07;  //clear TCE, or SRTC_STSR can  not be written
    403          //   	   RTC_TSR = 0x00000005;  //clear TOF
    404          //           RTC_SR = 0x10; //start time again to exit wait loop in application code.
    405          //   }	 	
    406          //   else if((RTC_SR & 0x04) == 0x04)
    407          //   {
    408          //   	   printf("SRTC alarm interrupt entered...\r\n");
    409          //   	   RTC_TAR = 0x0;// Write 0 to disable
    410          //   	   //SPIOC_PTC_PDOR = 0x0001 ^ GPIOC_PTC_PDOR;
    411          //   }	
    412          //   else
    413          //   {
    414          //           printf("No valid Flag was set!\n");
    415          //   }
    416          //   return;
    417          //}
    418          
    419          /* End of "vectors.c" */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   abort_isr
         8   -> printf
       8   default_isr
         8   -> printf
      40   hard_fault_handler_c
        40   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      48  ?_0
      36  ?_1
      12  ?_10
      12  ?_11
      12  ?_12
      12  ?_13
      12  ?_14
      12  ?_15
      24  ?_2
      12  ?_3
      12  ?_4
      12  ?_5
      12  ?_6
      12  ?_7
      12  ?_8
      12  ?_9
    1040  __vector_table
      24  abort_isr
      14  default_isr
     150  hard_fault_handler_c

 
 1 040 bytes in section .intvec
   264 bytes in section .rodata
   280 bytes in section .text
 
   280 bytes of CODE  memory
 1 304 bytes of CONST memory

Errors: none
Warnings: none
