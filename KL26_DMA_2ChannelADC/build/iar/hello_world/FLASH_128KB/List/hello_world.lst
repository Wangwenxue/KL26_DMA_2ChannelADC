###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        04/Feb/2016  12:02:41
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\src\projects\hello_world\hello_world.c
#    Command line =  
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\src\projects\hello_world\hello_world.c
#        -D IAR -D FREEDOM -lCN
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\List\
#        -lB
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\List\
#        -o
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\projects\hello_world\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\common\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\cpu\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\cpu\headers\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\llwu\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\lptmr\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\mcg\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\pmc\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\rcm\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\rtc\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\smc\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\uart\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\wdog\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\drivers\cmp\
#        -I
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\..\..\src\platforms\
#        -I D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\..\
#        -Ol
#    List file    =  
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\List\hello_world.lst
#    Object file  =  
#        D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\build\iar\hello_world\FLASH_128KB\Obj\hello_world.o
#
###############################################################################

D:\jicheng_dma_adc\KL26_DMA_2ChannelADC\src\projects\hello_world\hello_world.c
      1          /*
      2           * File:		hello_world.c
      3           * Purpose:		Main process
      4           *
      5           */
      6          
      7          #include "common.h" 
      8          
      9          #define BUFFER_SIZE     10
     10          #define ADC_CHANNEL_NUMBER 4
     11          #define ADC_SAMPLE_POINTS  20   // adc sample points for one adc channel
     12          #define BUFFER_SIZE     (ADC_SAMPLE_POINTS * ADC_CHANNEL_NUMBER)
     13          
     14          
     15          #pragma data_alignment = 4* ADC_CHANNEL_NUMBER //The ADC_Channel address should be align with the DMA Circular buffer size

   \                                 In section .data, align 16
     16          uint32 ADC_Channel[ADC_CHANNEL_NUMBER]={0, 26, 29, 30};   //Channel list for Channe 0,Channe 26,Channel 29, Channe30
   \                     ADC_Channel:
   \   00000000   0x00000000         DC32 0, 26, 29, 30
   \              0x0000001A   
   \              0x0000001D   
   \              0x0000001E   
     17          

   \                                 In section .bss, align 1
     18          unsigned char pCounter=0;               // Counter used for Dual buffer switch
   \                     pCounter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     19          uint16 Result_Buffer1[BUFFER_SIZE]={0};  //Buffer1  
   \                     Result_Buffer1:
   \   00000000                      DS8 160

   \                                 In section .bss, align 4
     20          uint16 Result_Buffer2[BUFFER_SIZE]={0};  //Buffer2
   \                     Result_Buffer2:
   \   00000000                      DS8 160
     21          

   \                                 In section .data, align 4
     22          uint32 Buffer_Address[2]={(uint32)&Result_Buffer1, (uint32)&Result_Buffer2};    //Buffer list
   \                     Buffer_Address:
   \   00000000   0x........         DC32 Result_Buffer1, Result_Buffer2
   \              0x........   
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void init_ADC8(void)
     25          {
     26            // Turn on the ADC0 clock 
     27            SIM_SCGC6 |= (SIM_SCGC6_ADC0_MASK );
   \                     init_ADC8: (+1)
   \   00000000   0x....             LDR      R0,??DataTable3  ;; 0x4004803c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x0509             LSLS     R1,R1,#+20       ;; #+134217728
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable3  ;; 0x4004803c
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     28                      
     29            ADC0_CFG1 = ADC_CFG1_ADIV(1)          //divide ratio is 2 and the clock rate is (input clock)/2.
     30                        | ADC_CFG1_MODE(3)        // single-end 8bit mode
     31                        | ADC_CFG1_ADICLK(0);     //Bus clock         
   \   0000000E   0x202C             MOVS     R0,#+44
   \   00000010   0x....             LDR      R1,??DataTable3_1  ;; 0x4003b008
   \   00000012   0x6008             STR      R0,[R1, #+0]
     32            
     33            ADC0_CFG2 = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR      R1,??DataTable3_2  ;; 0x4003b00c
   \   00000018   0x6008             STR      R0,[R1, #+0]
     34            
     35            ADC0_CV1 =  0x1234u;                  // can be anything
   \   0000001A   0x....             LDR      R0,??DataTable3_3  ;; 0x1234
   \   0000001C   0x....             LDR      R1,??DataTable3_4  ;; 0x4003b018
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     36            ADC0_CV2 = 0x5678u;                   // can be anything
   \   00000020   0x....             LDR      R0,??DataTable3_5  ;; 0x5678
   \   00000022   0x....             LDR      R1,??DataTable3_6  ;; 0x4003b01c
   \   00000024   0x6008             STR      R0,[R1, #+0]
     37                         
     38            ADC0_SC2 = 0 | ADC_SC2_DMAEN_MASK;    //ADC conversion complete DMA enable
   \   00000026   0x2004             MOVS     R0,#+4
   \   00000028   0x....             LDR      R1,??DataTable3_7  ;; 0x4003b020
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     39            
     40            ADC0_SC3 = 0;                         // Hardware average disable and once conversion
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR      R1,??DataTable3_8  ;; 0x4003b024
   \   00000030   0x6008             STR      R0,[R1, #+0]
     41          
     42          }
   \   00000032   0x4770             BX       LR               ;; return
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void init_TPM1(void)
     45          {
     46            SIM_SCGC6 |= (SIM_SCGC6_TPM1_MASK );
   \                     init_TPM1: (+1)
   \   00000000   0x....             LDR      R0,??DataTable3  ;; 0x4004803c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x0489             LSLS     R1,R1,#+18       ;; #+33554432
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable3  ;; 0x4004803c
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     47            SIM_SOPT2 |= SIM_SOPT2_TPMSRC(1);        //input clock source is MCGPLL/2=24MHz
   \   0000000E   0x....             LDR      R0,??DataTable3_9  ;; 0x40048004
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2180             MOVS     R1,#+128
   \   00000014   0x0449             LSLS     R1,R1,#+17       ;; #+16777216
   \   00000016   0x4301             ORRS     R1,R1,R0
   \   00000018   0x....             LDR      R0,??DataTable3_9  ;; 0x40048004
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     48            TPM1_SC = TPM_SC_DMA_MASK | TPM_SC_PS(3);//Divide by 3M=24M/8
   \   0000001C   0x20FF             MOVS     R0,#+255
   \   0000001E   0x1D00             ADDS     R0,R0,#+4        ;; #+259
   \   00000020   0x....             LDR      R1,??DataTable3_10  ;; 0x40039000
   \   00000022   0x6008             STR      R0,[R1, #+0]
     49            TPM1_CNT = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR      R1,??DataTable3_11  ;; 0x40039004
   \   00000028   0x6008             STR      R0,[R1, #+0]
     50            TPM1_MOD = 30;        //timer interrupt triger with 100ksps
   \   0000002A   0x201E             MOVS     R0,#+30
   \   0000002C   0x....             LDR      R1,??DataTable3_12  ;; 0x40039008
   \   0000002E   0x6008             STR      R0,[R1, #+0]
     51            
     52            TPM1_SC |= TPM_SC_CMOD(1);    //start the counter
   \   00000030   0x....             LDR      R0,??DataTable3_10  ;; 0x40039000
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x2108             MOVS     R1,#+8
   \   00000036   0x4301             ORRS     R1,R1,R0
   \   00000038   0x....             LDR      R0,??DataTable3_10  ;; 0x40039000
   \   0000003A   0x6001             STR      R1,[R0, #+0]
     53          }
   \   0000003C   0x4770             BX       LR               ;; return
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void DMA_2ChanelADC_Init(void)
     56          {
   \                     DMA_2ChanelADC_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     57            SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;
   \   00000002   0x....             LDR      R0,??DataTable3  ;; 0x4004803c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable3  ;; 0x4004803c
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     58            SIM_SCGC7 |= SIM_SCGC7_DMA_MASK;
   \   0000000E   0x....             LDR      R0,??DataTable3_13  ;; 0x40048040
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2180             MOVS     R1,#+128
   \   00000014   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000016   0x4301             ORRS     R1,R1,R0
   \   00000018   0x....             LDR      R0,??DataTable3_13  ;; 0x40048040
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     59            
     60            enable_irq(INT_DMA1-16);
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       enable_irq
     61            
     62            DMA_SAR0 = (uint32) &ADC_Channel;    //Set source address to ADC_Channel
   \   00000022   0x....             LDR      R0,??DataTable3_14
   \   00000024   0x....             LDR      R1,??DataTable3_15  ;; 0x40008100
   \   00000026   0x6008             STR      R0,[R1, #+0]
     63            DMA_DSR_BCR0 = DMA_DSR_BCR_BCR(4*BUFFER_SIZE);    //Set BCR to know how many bytes to transfer, every transfer is 32 bit size
   \   00000028   0x20A0             MOVS     R0,#+160
   \   0000002A   0x0040             LSLS     R0,R0,#+1        ;; #+320
   \   0000002C   0x....             LDR      R1,??DataTable3_16  ;; 0x40008108
   \   0000002E   0x6008             STR      R0,[R1, #+0]
     64            DMA_DCR0 &= ~(DMA_DCR_SSIZE_MASK | DMA_DCR_DSIZE_MASK);    //Clear source size and destination size fields
   \   00000030   0x....             LDR      R0,??DataTable3_17  ;; 0x4000810c
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x....             LDR      R1,??DataTable3_18  ;; 0xffc9ffff
   \   00000036   0x4001             ANDS     R1,R1,R0
   \   00000038   0x....             LDR      R0,??DataTable3_17  ;; 0x4000810c
   \   0000003A   0x6001             STR      R1,[R0, #+0]
     65            /* Set DMA as follows: 
     66                 Source size is 32-bit size 
     67                 Destination size is 32-bit size 
     68                 Cycle steal mode 
     69                 External requests are enabled 
     70                 source address increments 1 automatically 
     71          */
     72            DMA_DCR0 |= (DMA_DCR_SSIZE(0)  // source size 32 bit
     73                       | DMA_DCR_DSIZE(0) // desitination size 32bit
     74                       | DMA_DCR_CS_MASK  // Forces a single read/write transfer per request
     75                       | DMA_DCR_ERQ_MASK  // Enables peripheral request to initiate transfer.
     76                       | DMA_DCR_SINC_MASK // the source address increments after each successful transfer.
     77                       | DMA_DCR_SMOD(1)); //16 bytes circular buffer
   \   0000003C   0x....             LDR      R0,??DataTable3_17  ;; 0x4000810c
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x....             LDR      R1,??DataTable3_19  ;; 0x60401000
   \   00000042   0x4301             ORRS     R1,R1,R0
   \   00000044   0x....             LDR      R0,??DataTable3_17  ;; 0x4000810c
   \   00000046   0x6001             STR      R1,[R0, #+0]
     78            
     79            DMA_DAR0 = (uint32) &ADC0_SC1A;//0x4003B000;    //Set source address to ADC0_SC1A
   \   00000048   0x....             LDR      R0,??DataTable3_20  ;; 0x4003b000
   \   0000004A   0x....             LDR      R1,??DataTable3_21  ;; 0x40008104
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     80            DMAMUX0_CHCFG0 = DMAMUX_CHCFG_SOURCE(55);    //Select TPM1 overflow as channel source
   \   0000004E   0x2037             MOVS     R0,#+55
   \   00000050   0x....             LDR      R1,??DataTable3_22  ;; 0x40021000
   \   00000052   0x7008             STRB     R0,[R1, #+0]
     81            DMAMUX0_CHCFG0 |= DMAMUX_CHCFG_ENBL_MASK;    //Enable the DMA MUX channel
   \   00000054   0x....             LDR      R0,??DataTable3_22  ;; 0x40021000
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x2180             MOVS     R1,#+128
   \   0000005A   0x4301             ORRS     R1,R1,R0
   \   0000005C   0x....             LDR      R0,??DataTable3_22  ;; 0x40021000
   \   0000005E   0x7001             STRB     R1,[R0, #+0]
     82            
     83            /*********************************************************************/
     84            DMA_SAR1 = (uint32) &ADC0_RA;//0x4003B010;    //Set source address to ADC0_RA
   \   00000060   0x....             LDR      R0,??DataTable3_23  ;; 0x4003b010
   \   00000062   0x....             LDR      R1,??DataTable3_24  ;; 0x40008110
   \   00000064   0x6008             STR      R0,[R1, #+0]
     85            DMA_DSR_BCR1 = DMA_DSR_BCR_BCR(2*BUFFER_SIZE);    //Set BCR to know how many bytes to transfer , every transfer is 16 bit size
   \   00000066   0x20A0             MOVS     R0,#+160
   \   00000068   0x....             LDR      R1,??DataTable3_25  ;; 0x40008118
   \   0000006A   0x6008             STR      R0,[R1, #+0]
     86            DMA_DCR1 &= ~(DMA_DCR_SSIZE_MASK | DMA_DCR_DSIZE_MASK);    //Clear source size and destination size fields
   \   0000006C   0x....             LDR      R0,??DataTable3_26  ;; 0x4000811c
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x....             LDR      R1,??DataTable3_18  ;; 0xffc9ffff
   \   00000072   0x4001             ANDS     R1,R1,R0
   \   00000074   0x....             LDR      R0,??DataTable3_26  ;; 0x4000811c
   \   00000076   0x6001             STR      R1,[R0, #+0]
     87            /* Set DMA as follows: 
     88                 Source size is 16-bit size 
     89                 Destination size is 16-bit size 
     90                 Cycle steal mode 
     91                 External requests are enabled 
     92                 Destination address increments 1 automatically 
     93                 BCR Bytes trasfer completed interrupt enable
     94          */
     95            if ((DMA_DSR_BCR1 & DMA_DSR_BCR_DONE_MASK) == DMA_DSR_BCR_DONE_MASK)
   \   00000078   0x....             LDR      R0,??DataTable3_25  ;; 0x40008118
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x01C0             LSLS     R0,R0,#+7
   \   0000007E   0xD506             BPL      ??DMA_2ChanelADC_Init_0
     96              DMA_DSR_BCR1 |= DMA_DSR_BCR_DONE_MASK; 
   \   00000080   0x....             LDR      R0,??DataTable3_25  ;; 0x40008118
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x2180             MOVS     R1,#+128
   \   00000086   0x0449             LSLS     R1,R1,#+17       ;; #+16777216
   \   00000088   0x4301             ORRS     R1,R1,R0
   \   0000008A   0x....             LDR      R0,??DataTable3_25  ;; 0x40008118
   \   0000008C   0x6001             STR      R1,[R0, #+0]
     97            
     98            DMA_DCR1 |= (DMA_DCR_SSIZE(2) // source size 16 bit
     99                       | DMA_DCR_DSIZE(2) // desitination size 16bit
    100                       | DMA_DCR_CS_MASK  // Forces a single read/write transfer per request
    101                       | DMA_DCR_ERQ_MASK  // Enables peripheral request to initiate transfer.
    102                       | DMA_DCR_DINC_MASK // the destination address increments after each successful transfer.
    103                       | DMA_DCR_EINT_MASK); // Enable Interrupt on Completion of Transfer
   \                     ??DMA_2ChanelADC_Init_0: (+1)
   \   0000008E   0x....             LDR      R0,??DataTable3_26  ;; 0x4000811c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x....             LDR      R1,??DataTable3_27  ;; 0xe02c0000
   \   00000094   0x4301             ORRS     R1,R1,R0
   \   00000096   0x....             LDR      R0,??DataTable3_26  ;; 0x4000811c
   \   00000098   0x6001             STR      R1,[R0, #+0]
    104            
    105            DMA_DAR1 = (uint32) &Result_Buffer1;    //Set source address to result buffer
   \   0000009A   0x....             LDR      R0,??DataTable3_28
   \   0000009C   0x....             LDR      R1,??DataTable3_29  ;; 0x40008114
   \   0000009E   0x6008             STR      R0,[R1, #+0]
    106            DMAMUX0_CHCFG1 = DMAMUX_CHCFG_SOURCE(40);    //Select ADC0 COCO flag as channel source
   \   000000A0   0x2028             MOVS     R0,#+40
   \   000000A2   0x....             LDR      R1,??DataTable3_30  ;; 0x40021001
   \   000000A4   0x7008             STRB     R0,[R1, #+0]
    107            DMAMUX0_CHCFG1 |= DMAMUX_CHCFG_ENBL_MASK;    //Enable the DMA MUX channel
   \   000000A6   0x....             LDR      R0,??DataTable3_30  ;; 0x40021001
   \   000000A8   0x7800             LDRB     R0,[R0, #+0]
   \   000000AA   0x2180             MOVS     R1,#+128
   \   000000AC   0x4301             ORRS     R1,R1,R0
   \   000000AE   0x....             LDR      R0,??DataTable3_30  ;; 0x40021001
   \   000000B0   0x7001             STRB     R1,[R0, #+0]
    108          }
   \   000000B2   0xBD01             POP      {R0,PC}          ;; return
    109          
    110          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
    111          int main (void)
    112          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    113              	char ch;
    114          
    115                  init_ADC8();
   \   00000002   0x.... 0x....      BL       init_ADC8
    116                  
    117                  DMA_2ChanelADC_Init();
   \   00000006   0x.... 0x....      BL       DMA_2ChanelADC_Init
    118                  
    119                  init_TPM1();
   \   0000000A   0x.... 0x....      BL       init_TPM1
    120                  
    121                  EnableInterrupts;
   \   0000000E   0xB662             CPSIE i
    122                  
    123          	while(1)
   \                     ??main_0: (+1)
   \   00000010   0xE7FE             B        ??main_0
    124          	{
    125          		
    126          	} 
    127          }
    128          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    129          void DMA1_IRQHandler(void)
    130          { 
   \                     DMA1_IRQHandler: (+1)
   \   00000000   0xB500             PUSH     {LR}
    131            TPM1_SC &= TPM_SC_CMOD(0);    //stop the counter
   \   00000002   0x....             LDR      R0,??DataTable3_10  ;; 0x40039000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR      R1,??DataTable3_10  ;; 0x40039000
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    132            DMA_DCR1 &= ~DMA_DCR_ERQ_MASK;  // 0 Peripheral request is ignored.
   \   0000000C   0x....             LDR      R0,??DataTable3_26  ;; 0x4000811c
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x....             LDR      R1,??DataTable3_31  ;; 0xbfffffff
   \   00000012   0x4001             ANDS     R1,R1,R0
   \   00000014   0x....             LDR      R0,??DataTable3_26  ;; 0x4000811c
   \   00000016   0x6001             STR      R1,[R0, #+0]
    133            
    134            /* Create pointer & variable for reading DMA_DSR register */   
    135            if ((DMA_DSR_BCR1 & DMA_DSR_BCR_DONE_MASK) == DMA_DSR_BCR_DONE_MASK)
   \   00000018   0x....             LDR      R0,??DataTable3_25  ;; 0x40008118
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x01C0             LSLS     R0,R0,#+7
   \   0000001E   0xD528             BPL      ??DMA1_IRQHandler_0
    136            {         
    137              DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK;      //Clear Done bit 
   \   00000020   0x....             LDR      R0,??DataTable3_16  ;; 0x40008108
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x2180             MOVS     R1,#+128
   \   00000026   0x0449             LSLS     R1,R1,#+17       ;; #+16777216
   \   00000028   0x4301             ORRS     R1,R1,R0
   \   0000002A   0x....             LDR      R0,??DataTable3_16  ;; 0x40008108
   \   0000002C   0x6001             STR      R1,[R0, #+0]
    138              DMA_DSR_BCR1 |= DMA_DSR_BCR_DONE_MASK;      //Clear Done bit 
   \   0000002E   0x....             LDR      R0,??DataTable3_25  ;; 0x40008118
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x2180             MOVS     R1,#+128
   \   00000034   0x0449             LSLS     R1,R1,#+17       ;; #+16777216
   \   00000036   0x4301             ORRS     R1,R1,R0
   \   00000038   0x....             LDR      R0,??DataTable3_25  ;; 0x40008118
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    139              
    140              if(++pCounter>=2)
   \   0000003C   0x....             LDR      R0,??DataTable3_32
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \   00000042   0x....             LDR      R1,??DataTable3_32
   \   00000044   0x7008             STRB     R0,[R1, #+0]
   \   00000046   0x....             LDR      R0,??DataTable3_32
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x2802             CMP      R0,#+2
   \   0000004C   0xDB02             BLT      ??DMA1_IRQHandler_1
    141              {
    142                pCounter=0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x....             LDR      R1,??DataTable3_32
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    143              }
    144              
    145              DMA_DAR1 = (uint32) Buffer_Address[pCounter];    //Set source address to result buffer
   \                     ??DMA1_IRQHandler_1: (+1)
   \   00000054   0x....             LDR      R0,??DataTable3_33
   \   00000056   0x....             LDR      R1,??DataTable3_32
   \   00000058   0x7809             LDRB     R1,[R1, #+0]
   \   0000005A   0x2204             MOVS     R2,#+4
   \   0000005C   0x4351             MULS     R1,R2,R1
   \   0000005E   0x5840             LDR      R0,[R0, R1]
   \   00000060   0x....             LDR      R1,??DataTable3_29  ;; 0x40008114
   \   00000062   0x6008             STR      R0,[R1, #+0]
    146              
    147              DMA_DSR_BCR0 = DMA_DSR_BCR_BCR(4*BUFFER_SIZE);      //Reset BCR 
   \   00000064   0x20A0             MOVS     R0,#+160
   \   00000066   0x0040             LSLS     R0,R0,#+1        ;; #+320
   \   00000068   0x....             LDR      R1,??DataTable3_16  ;; 0x40008108
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    148              DMA_DSR_BCR1 = DMA_DSR_BCR_BCR(2*BUFFER_SIZE);      //Reset BCR 
   \   0000006C   0x20A0             MOVS     R0,#+160
   \   0000006E   0x....             LDR      R1,??DataTable3_25  ;; 0x40008118
   \   00000070   0x6008             STR      R0,[R1, #+0]
    149              
    150          
    151            }  
    152            
    153            TPM1_SC |= TPM_SC_CMOD(1);    //restart the counter to triger ADC 
   \                     ??DMA1_IRQHandler_0: (+1)
   \   00000072   0x....             LDR      R0,??DataTable3_10  ;; 0x40039000
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x2108             MOVS     R1,#+8
   \   00000078   0x4301             ORRS     R1,R1,R0
   \   0000007A   0x....             LDR      R0,??DataTable3_10  ;; 0x40039000
   \   0000007C   0x6001             STR      R1,[R0, #+0]
    154            DMA_DCR1 |= DMA_DCR_ERQ_MASK;  //Enables peripheral request
   \   0000007E   0x....             LDR      R0,??DataTable3_26  ;; 0x4000811c
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x2180             MOVS     R1,#+128
   \   00000084   0x05C9             LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000086   0x4301             ORRS     R1,R1,R0
   \   00000088   0x....             LDR      R0,??DataTable3_26  ;; 0x4000811c
   \   0000008A   0x6001             STR      R1,[R0, #+0]
    155          }
   \   0000008C   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x4003B008         DC32     0x4003b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4003B00C         DC32     0x4003b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x00001234         DC32     0x1234

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4003B018         DC32     0x4003b018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x00005678         DC32     0x5678

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x4003B01C         DC32     0x4003b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4003B020         DC32     0x4003b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4003B024         DC32     0x4003b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x40039004         DC32     0x40039004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x40039008         DC32     0x40039008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     ADC_Channel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x40008100         DC32     0x40008100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x40008108         DC32     0x40008108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x4000810C         DC32     0x4000810c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0xFFC9FFFF         DC32     0xffc9ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x60401000         DC32     0x60401000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x40008104         DC32     0x40008104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   0x4003B010         DC32     0x4003b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \   00000000   0x40008110         DC32     0x40008110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \   00000000   0x40008118         DC32     0x40008118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_26:
   \   00000000   0x4000811C         DC32     0x4000811c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_27:
   \   00000000   0xE02C0000         DC32     0xe02c0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_28:
   \   00000000   0x........         DC32     Result_Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_29:
   \   00000000   0x40008114         DC32     0x40008114

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_30:
   \   00000000   0x40021001         DC32     0x40021001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_31:
   \   00000000   0xBFFFFFFF         DC32     0xbfffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_32:
   \   00000000   0x........         DC32     pCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_33:
   \   00000000   0x........         DC32     Buffer_Address

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   DMA1_IRQHandler
       8   DMA_2ChanelADC_Init
         8   -> enable_irq
       0   init_ADC8
       0   init_TPM1
       8   main
         8   -> DMA_2ChanelADC_Init
         8   -> init_ADC8
         8   -> init_TPM1


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_27
       4  ??DataTable3_28
       4  ??DataTable3_29
       4  ??DataTable3_3
       4  ??DataTable3_30
       4  ??DataTable3_31
       4  ??DataTable3_32
       4  ??DataTable3_33
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      16  ADC_Channel
       8  Buffer_Address
     142  DMA1_IRQHandler
     180  DMA_2ChanelADC_Init
     160  Result_Buffer1
     160  Result_Buffer2
      52  init_ADC8
      62  init_TPM1
      18  main
       1  pCounter

 
 321 bytes in section .bss
  24 bytes in section .data
 590 bytes in section .text
 
 590 bytes of CODE memory
 345 bytes of DATA memory

Errors: none
Warnings: 2
